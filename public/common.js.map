{"version":3,"file":"common.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA,IAAaE,MAAM,GAAnB,MAAaA,MAAb,CAAmB;AAEjBC,cACSC,KADT,EAEqBC,QAAgB,IAFrC,EAGqBC,UAAmB,IAHxC,EAG4C;AAFnC;AACY;AACA;;AAEnB,QAAI,CAAC,KAAKD,KAAV,EAAiB;AACf,WAAKA,KAAL,GAAa,KAAKD,KAAlB;AACD;;AACD,QAAI,KAAKE,OAAL,KAAiB,IAArB,EAA2B;AACzB,WAAKC,OAAL,GAAe,IAAIN,uDAAJ,CAAgB,KAAKK,OAArB,CAAf;AACA,WAAKC,OAAL,CAAaC,QAAb,CAAsB,KAAKF,OAA3B;AACD;AACF;;AAEDG,YAAU,CAACH,OAAD,EAAiB;AACzB,SAAKC,OAAL,CAAaC,QAAb,CAAsBF,OAAtB;AACD;;AAlBgB,CAAnB;AAAaJ,MAAM,sDAIdQ,8CAAAA,IAAAA,uDAAQ,EAAR,CAJc,EAKdA,8CAAAA,IAAAA,uDAAQ,EAAR,CALc,GAANR,MAAM,CAAN;AAAAA;AAqBb,IAAaS,SAAS,GAAtB,MAAaA,SAAb,CAAsB;AACpBR,cACSS,IADT,EAESP,KAFT,EAGSQ,IAHT,EAIqBC,UAAoB,EAJzC,EAI2C;AAHlC;AACA;AACA;AACY;AACjB;;AACJC,YAAU,CAACD,OAAD,EAAkB;AAC1B,SAAKA,OAAL,GAAeA,OAAf;AACD;;AACDE,WAAS,CAACZ,KAAD,EAAc;AACrB,SAAK,MAAMa,GAAX,IAAkB,KAAKH,OAAvB,EAAgC;AAC9B,UAAIG,GAAG,CAACb,KAAJ,KAAcA,KAAlB,EAAyB;AACvB,eAAOa,GAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AACDC,WAAS;AACP,WAAO,KAAKJ,OAAL,CAAaK,MAAb,CAAqBC,MAAD,IAAW;AACpC,UAAIA,MAAM,CAACb,OAAP,CAAeH,KAAnB,EAA0B;AACxB,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD,KALM,EAKJiB,GALI,CAKAD,MAAM,IAAIA,MAAM,CAAChB,KALjB,CAAP;AAMD;;AAzBmB,CAAtB;AAAaO,SAAS,sDAKjBD,8CAAAA,IAAAA,uDAAQ,EAAR,CALiB,GAATC,SAAS,CAAT;AAAAA;AA4BP,MAAOW,IAAP,CAAW;AAGD,SAAPC,OAAO,CAACA,OAAD,EAAa;AACzB,UAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD;;AACe,SAATC,SAAS,CAACA,SAAD,EAAe;AAC7B,UAAM,IAAID,KAAJ,CAAU,yBAAV,CAAN;AACD;;AARc","sources":["./src/app/_models/formField.ts"],"sourcesContent":["import { Optional } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { startWith } from 'rxjs-compat/operator/startWith';\n\nexport class Option {\n  control: FormControl;\n  constructor(\n    public value: string,\n    @Optional() public label: string = null,\n    @Optional() public checked: boolean = null\n  ) {\n    if (!this.label) {\n      this.label = this.value;\n    }\n    if (this.checked !== null) {\n      this.control = new FormControl(this.checked);\n      this.control.setValue(this.checked);\n    }\n  }\n\n  setChecked(checked: boolean): void {\n    this.control.setValue(checked);\n  }\n}\n\nexport class FormField {\n  constructor(\n    public name: string,\n    public label: string,\n    public type: string,\n    @Optional() public options: Option[] = [],\n  ) {}\n  setOptions(options: Option[]): void {\n    this.options = options;\n  }\n  getOption(value: string): Option {\n    for (const opt of this.options) {\n      if (opt.value === value) {\n        return opt;\n      }\n    }\n    return null;\n  }\n  getValues() {\n    return this.options.filter((option) => {\n      if (option.control.value) {\n        return true;\n      }\n      return false;\n    }).map(option => option.value);\n  }\n}\n\nexport class Meta {\n  drivers?: [];\n  languages?: [];\n  static drivers(drivers: any) {\n    throw new Error('Method not implemented.');\n  }\n  static languages(languages: any) {\n    throw new Error('Method not implemented.');\n  }\n}\n"],"names":["Optional","FormControl","Option","constructor","value","label","checked","control","setValue","setChecked","__param","FormField","name","type","options","setOptions","getOption","opt","getValues","filter","option","map","Meta","drivers","Error","languages"],"sourceRoot":"webpack:///"}