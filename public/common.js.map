{"version":3,"file":"common.js","mappings":";;;;;;;;;;;;;;;;;;;AAAyC;AACI;AAG7C,IAAa,MAAM,GAAnB,MAAa,MAAM;IAEjB,YACS,KAAa,EACD,QAAgB,IAAI,EACpB,UAAmB,IAAI;QAFnC,UAAK,GAAL,KAAK,CAAQ;QACD,UAAK,GAAL,KAAK,CAAe;QACpB,YAAO,GAAP,OAAO,CAAgB;QAE1C,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;SACzB;QACD,IAAI,IAAI,CAAC,OAAO,KAAK,IAAI,EAAE;YACzB,IAAI,CAAC,OAAO,GAAG,IAAI,uDAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC7C,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACrC;IACH,CAAC;IAED,UAAU,CAAC,OAAgB;QACzB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACjC,CAAC;CACF;AAnBY,MAAM;IAId,yGAAQ,EAAE;IACV,yGAAQ,EAAE;GALF,MAAM,CAmBlB;AAnBkB;AAqBnB,IAAa,SAAS,GAAtB,MAAa,SAAS;IACpB,YACS,IAAY,EACZ,KAAa,EACb,IAAY,EACA,UAAoB,EAAE;QAHlC,SAAI,GAAJ,IAAI,CAAQ;QACZ,UAAK,GAAL,KAAK,CAAQ;QACb,SAAI,GAAJ,IAAI,CAAQ;QACA,YAAO,GAAP,OAAO,CAAe;IACxC,CAAC;IACJ,UAAU,CAAC,OAAiB;QAC1B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IACD,SAAS,CAAC,KAAa;QACrB,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,OAAO,EAAE;YAC9B,IAAI,GAAG,CAAC,KAAK,KAAK,KAAK,EAAE;gBACvB,OAAO,GAAG,CAAC;aACZ;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IACD,SAAS;QACP,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE;YACpC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE;gBACxB,OAAO,IAAI,CAAC;aACb;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;CACF;AA1BY,SAAS;IAKjB,yGAAQ,EAAE;GALF,SAAS,CA0BrB;AA1BqB;AA4Bf,MAAM,IAAI;IAGf,MAAM,CAAC,OAAO,CAAC,OAAY;QACzB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,MAAM,CAAC,SAAS,CAAC,SAAc;QAC7B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;CACF","sources":["./src/app/_models/formField.ts"],"sourcesContent":["import { Optional } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { startWith } from 'rxjs-compat/operator/startWith';\n\nexport class Option {\n  control: FormControl;\n  constructor(\n    public value: string,\n    @Optional() public label: string = null,\n    @Optional() public checked: boolean = null\n  ) {\n    if (!this.label) {\n      this.label = this.value;\n    }\n    if (this.checked !== null) {\n      this.control = new FormControl(this.checked);\n      this.control.setValue(this.checked);\n    }\n  }\n\n  setChecked(checked: boolean): void {\n    this.control.setValue(checked);\n  }\n}\n\nexport class FormField {\n  constructor(\n    public name: string,\n    public label: string,\n    public type: string,\n    @Optional() public options: Option[] = [],\n  ) {}\n  setOptions(options: Option[]): void {\n    this.options = options;\n  }\n  getOption(value: string): Option {\n    for (const opt of this.options) {\n      if (opt.value === value) {\n        return opt;\n      }\n    }\n    return null;\n  }\n  getValues() {\n    return this.options.filter((option) => {\n      if (option.control.value) {\n        return true;\n      }\n      return false;\n    }).map(option => option.value);\n  }\n}\n\nexport class Meta {\n  drivers?: [];\n  languages?: [];\n  static drivers(drivers: any) {\n    throw new Error('Method not implemented.');\n  }\n  static languages(languages: any) {\n    throw new Error('Method not implemented.');\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}