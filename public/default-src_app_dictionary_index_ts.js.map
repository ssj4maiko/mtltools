{"version":3,"file":"default-src_app_dictionary_index_ts.js","mappings":"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","sources":["./src/app/dictionary/add/add.component.ts","./src/app/_views/form/form.component.html","./src/app/dictionary/dictionary-routing.module.ts","./src/app/dictionary/dictionary.module.ts","./src/app/dictionary/diff/diff.component.ts","./src/app/dictionary/diff/diff.component.html","./src/app/dictionary/edit/edit.component.ts","./src/app/dictionary/form.service.ts","./src/app/dictionary/index.ts","./src/app/dictionary/list/list.component.html","./src/app/dictionary/list/list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ApiService } from '../../api';\nimport { FormControl, FormGroupDirective, FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';\n\nimport { Dictionary } from '../../_models/dictionary';\nimport { FormField, Meta, Option } from '../../_models/formField';\nimport { FormService } from '../form.service';\nimport { Novel } from 'src/app/_models';\n\n@Component({\n  selector: 'app-dictionary-add',\n  templateUrl: '../../_views/form/form.component.html',\n  styleUrls: ['../../_views/form/form.component.scss']\n})\nexport class AddComponent extends FormService implements OnInit {\n\n  formTitle: string;\n  idDictionary: number;\n  idNovel: number;\n  dictionary: Dictionary;\n  novels: Novel[];\n\n  constructor(\n      private router: Router\n    , private route: ActivatedRoute\n    , public api: ApiService\n    , public formBuilder: FormBuilder\n  ) {\n    super(formBuilder);\n  }\n\n\n  ngOnInit() {\n    this.idNovel = this.route.snapshot.params.idNovel;\n    this.idDictionary = this.route.snapshot.params.idDictionary;\n    this.formTitle = 'Edit Dictionary';\n\n    Promise.all([\n      this.api.Meta.get('languages'),\n      this.api.Dictionary.get({ id: this.idDictionary }),\n      this.api.Novel.getAll(),\n    ]).then((values: [Meta, Dictionary, Novel[]]) => {\n        this.dictionary = values[1];\n        this.novels = values[2];\n        this.loadMeta(values[0], values[2]);\n        if (this.idNovel) {\n          this.api.Novel.get({id: this.idNovel})\n              .then(novel => {\n                this.setValues(null, [novel]);\n              });\n        }\n        this.getForm(true);\n    });\n  }\n\n\n  submitForm(form: NgForm) {\n    const values = this.getValues(this.novels);\n    this.api.Dictionary.add({ values })\n      .then(res => {\n        this.goBack();\n      }, (err) => {\n        console.log(err);\n      });\n  }\n  LINK(idDictionary?: number, action?: string) {\n    const base = [];\n    if (this.idNovel) {\n      base.push('novel');\n      base.push(this.idNovel);\n    }\n    base.push('dictionary');\n    if (action) {\n      base.push(action);\n    }\n    if (idDictionary) {\n      base.push(idDictionary);\n    }\n    this.router.navigate(base);\n  }\n\n  goBack() {\n    this.LINK();\n  }\n}\n","<div class=\"form-content\">\n    <h1 class=\"title\">{{ formTitle }}</h1>\n    <form [formGroup]=\"formGroup\" (ngSubmit)=\"submitForm(formGroup.value)\">\n        <div *ngFor=\"let field of form\" class='field'>\n\n            <ng-container [ngSwitch]=\"field.type\">\n\n                <ng-container #tempHidden *ngSwitchCase=\"'hidden'\">\n                    <input type=\"hidden\" formControlName=\"{{ field.name }}\">\n                </ng-container>\n\n                <ng-container #tempCheck *ngSwitchCase=\"'checkbox'\">\n                    <label class='checkbox'>\n                        <input type=\"checkbox\" formControlName=\"{{ field.name }}\">\n                        {{ field.label }}\n                    </label>\n                </ng-container>\n\n                <ng-container #tempCheck *ngSwitchCase=\"'select'\">\n                    <label>{{ field.label }}</label>\n                    <div class=\"control\">\n                        <select formControlName=\"{{ field.name }}\">\n                            <option *ngFor=\"let option of field.options\" value=\"{{option.value}}\">{{ option.label }}</option>\n                        </select>\n                    </div>\n                </ng-container>\n\n                <ng-container #tempCheck *ngSwitchCase=\"'multiselect'\">\n                    <label>{{ field.label }} - {{ field.name }}</label>\n                    <div class=\"control\">\n                        <!--p *ngFor=\"let option of field.options; let i = index\"-->\n                        <p *ngFor=\"let option of field.options; let i = index\">\n                            <label>\n                                <!--<input type=\"checkbox\" value=\"{{option.value}}\" (change)=\"option.setChecked(!this.checked);\" [checked]=\"option.checked\" />-->\n                                <!--{{option.label}}-->\n                                <input type=\"checkbox\" [formControl]=\"option.control\" /> {{ option.label}}\n                            </label>\n                            <!--select multiple='multiple' formControlName=\"{{ field.name }}\" (change)=\"onDebug(this.value)\">\n                                <option *ngFor=\"let option of field.options\" value=\"{{option.value}}\">{{ option.label }}</option>\n                            </select-->\n                        </p>\n                    </div>\n                </ng-container>\n\n                <ng-container #tempText *ngSwitchDefault>\n                    <label class='label' for=\"{{ field.name }}\">{{ field.label }}</label>\n                    <div class=\"control\">\n                        <input type=\"{{ field.type }}\" id=\"{{ field.name }}\" formControlName=\"{{ field.name }}\" class=\"input\">\n                    </div>\n                    <!--p class=\"help is-success\"></p-->\n                    <!--p class=\"help is-danger\"></p-->\n                </ng-container>\n\n            </ng-container>\n        </div>\n\n        <div class=\"field is-grouped\">\n            <div class=\"control\">\n                <input type=\"submit\" class=\"button is-link\" value=\"Submit\" />\n            </div>\n            <div class=\"control\">\n                <input (click)=\"goBack()\" class=\"button is-danger\" value=\"Cancel\" />\n            </div>\n        </div>\n\n    </form>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CategoryModule } from '../category';\n\nimport { ListComponent } from './list/list.component';\nimport { AddComponent } from './add/add.component';\nimport { EditComponent } from './edit/edit.component';\nimport { DiffComponent } from './diff/diff.component';\n\n\nconst routes: Routes = [\n  {\n     path: ''\n    , component: ListComponent\n    , data: { title: 'List Dictionaries' }\n  },\n  {\n     path: 'add'\n    , component: AddComponent\n    , data: { title: 'Add Dictionaries', breadcrumb: 'Add Dictionary' }\n  },\n  {\n    path: 'edit/:idDictionary'\n    , component: EditComponent\n    , data: { title: 'Edit Dictionary', breadcrumb: 'Edit Dictionary' }\n  },\n  {\n    path: 'diff/:idDictionary'\n    , component: DiffComponent\n    , data: { title: 'Diff Dictionary', breadcrumb: 'Diff' }\n  },\n  {\n     path: ':idDictionary'\n        , loadChildren: () => import('../category').then(m => m.CategoryModule)\n    , data: { title: 'View categories', breadcrumb: 'View Categories' }\n  },\n  {\n     path: '**'\n    , redirectTo: ''\n  }\n];\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(\n      routes\n    )\n  ],\n  exports: [RouterModule]\n})\nexport class DictionaryRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DictionaryRoutingModule } from './dictionary-routing.module';\nimport { ListComponent } from './list/list.component';\nimport { AddComponent } from './add/add.component';\nimport { EditComponent } from './edit/edit.component';\nimport { DiffComponent } from './diff/diff.component';\n\nimport { FormsModule, ReactiveFormsModule  } from '@angular/forms';\n\n@NgModule({\n  declarations: [ListComponent, AddComponent, EditComponent, DiffComponent, ],\n  imports: [\n    CommonModule,\n    DictionaryRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ]\n})\nexport class DictionaryModule { }\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Dictionary } from 'src/app/_models/dictionary';\nimport { DictionaryCategory } from 'src/app/_models/dictionarycategory';\nimport { ApiService } from 'src/app/api';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DictionaryEntry } from 'src/app/_models/dictionaryentry';\n\n@Component({\n  selector: 'app-diff',\n  templateUrl: './diff.component.html',\n  styleUrls: ['./diff.component.scss']\n})\nexport class DiffComponent implements OnInit, OnDestroy {\n\n    dictionaries: Dictionary[] = [];\n\n    categories: DictionaryCategory[] = [];\n    categoriesHash: {} = {};\n    entries: DictionaryEntry[] = [];\n    idDictionary: number;\n    entriesOriginalValues: {} = {};\n\n    entry2SelectHash: {} = {};\n    entry2SelectHashKeys: string[] = [];\n\n    categoriesSelected: DictionaryCategory[] = [];\n    categoriesSelectedHash: {} = {};\n    entriesSelected: DictionaryEntry[] = [];\n    idDictionarySelected: number;\n\n    idNovel: number;\n\n    constructor(\n          private api: ApiService\n        , private route: ActivatedRoute\n        , private router: Router\n    ) { }\n\n    ngOnInit() {\n        this.idNovel = this.route.snapshot.params.idNovel;\n        this.idDictionary = this.route.snapshot.params.idDictionary;\n        this.api.Dictionary.getAll({ idNovel: this.idNovel })\n            .then((dictionaries) => {\n                // this.novels = [novels];\n                this.dictionaries = Object.values(dictionaries);\n                this.getCache();\n            }, (error) => {\n                console.log(error);\n            });\n    }\n    ngOnDestroy(): void {\n        delete this.dictionaries;\n        delete this.categories;\n        delete this.categoriesHash;\n        delete this.entries;\n        delete this.idDictionary;\n\n        delete this.entry2SelectHash;\n        delete this.entry2SelectHashKeys;\n\n        delete this.categoriesSelected;\n        delete this.categoriesSelectedHash;\n        delete this.entriesSelected;\n        delete this.idDictionarySelected;\n    }\n    loadSelectedDictionary() {\n        this.getSelectedCache();\n    }\n    changeEntry(entry) {\n        if (entry.id > 0) {\n            console.log('changeEntry', entry.id, entry.idCategory, entry);\n            entry.update =\n                    entry.entryOriginal != this.entriesOriginalValues[entry.id].entryOriginal\n                || entry.entryTranslation != this.entriesOriginalValues[entry.id].entryTranslation\n                || (!!entry.description && (entry.description != this.entriesOriginalValues[entry.id].description))\n                || entry.idCategory != this.entriesOriginalValues[entry.id].idCategory\n                ;\n        }\n    }\n    addEntry($event, i) {\n        const idCategory = $event.target.value,\n            selectedValues = this.entry2SelectHash[this.entry2SelectHashKeys[i]],\n            selectedEntry = this.entriesSelected[selectedValues.selected],\n            newEntry = new DictionaryEntry();\n\n        newEntry.id = 0;\n        newEntry.idCategory = idCategory;\n        newEntry.entryOriginal = selectedEntry.entryOriginal;\n        newEntry.entryTranslation = selectedEntry.entryTranslation;\n        newEntry.description = selectedEntry.description;\n\n        selectedValues.entry = this.entries.length;\n        this.entries.push(newEntry);\n    }\n    saveList() {\n        const tmpEntries = {},\n            send = [];\n\n        this.categories.forEach(category => {\n            send.push(category);\n            tmpEntries[category.id] = [];\n        });\n        this.entries.forEach(entry => {\n            tmpEntries[entry.idCategory].push(entry);\n        });\n        send.forEach(sen => {\n            sen.entries = tmpEntries[sen.id];\n        });\n\n        this.api.Dictionary.fullSave(this.idDictionary, send)\n            .then(status => {\n                if (status) {\n                    this.categories = [];\n                    this.dictionaries = Object.values(this.api.Dictionary.getAll());\n                    this.router.navigate(['/novel/dictionary/' ]);\n                }\n            });\n    }\n    private getCache() {\n        if (this.categories.length == 0) {\n\n            this.api.Dictionary.getCache(this.idDictionary)\n                .then((status) => {\n                    this.categories = [];\n                    this.entries = [];\n\n                    this.api.Category.getAll({idDictionary : this.idDictionary})\n                        .then((categories: DictionaryCategory[]) => {\n                            this.categories = categories;\n                            this.categories.forEach(category => {\n                                this.categoriesHash[category.id] = {\n                                    name: category.name\n                                };\n                                this.api.Entry.getAll({idDictionary : this.idDictionary, idCategory: category.id})\n                                    .then((entries : DictionaryEntry[]) => {\n                                        for (const i in entries) {\n                                            this.entry2SelectHash[entries[i].entryOriginal] = {\n                                                entry : this.entries.length,\n                                                selected : null\n                                            };\n                                            this.entries.push(entries[i]);\n                                            this.entriesOriginalValues[entries[i].id] = {\n                                                entryOriginal: '' + entries[i].entryOriginal\n                                                , entryTranslation: '' + entries[i].entryTranslation\n                                                , description: '' + entries[i].description\n                                                , idCategory: '' + entries[i].idCategory\n                                            };\n                                        }\n                                    });\n                            });\n                        });\n\n                    this.entry2SelectHashKeys = Object.keys(this.entry2SelectHash);\n                });\n        }\n    }\n    getSelectedCache() {\n        this.api.Dictionary.getCache(this.idDictionarySelected)\n            .then((status) => {\n                this.categoriesSelected = [];\n                this.entriesSelected = [];\n\n                this.api.Category.getAll({idDictionary : this.idDictionarySelected})\n                .then((categories:DictionaryCategory[]) => {\n                        this.categoriesSelected = categories;\n\n                    });\n                this.categoriesSelected.forEach(category => {\n                    this.categoriesSelectedHash[category.id] = {\n                        name: category.name\n                    };\n                    this.api.Entry.getAll({ idDictionary: this.idDictionarySelected, idCategory: category.id})\n                        .then((entries:DictionaryEntry[]) => {\n                            for (const i in entries) {\n        \n                                if (!this.entry2SelectHash[entries[i].entryOriginal]) {\n                                    this.entry2SelectHash[entries[i].entryOriginal] = {\n                                        entry: null,\n                                        selected: this.entriesSelected.length\n                                    };\n                                } else {\n                                    this.entry2SelectHash[entries[i].entryOriginal].selected = this.entriesSelected.length;\n                                }\n                                this.entriesSelected.push(entries[i]);\n                            }\n                        });\n                });\n                this.entry2SelectHashKeys = Object.keys(this.entry2SelectHash);\n            });\n    }\n\n}\n","\n<ng-template #actionButtons>\n    <div class=\"columns actionButtons\">\n        <div class=\"column\">\n            <a class=\"button is-info\" (click)=\"saveList()\">Save List</a>\n        </div>\n    </div>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"actionButtons\"></ng-container>\n\n<div>\n    <table class='table is-stripede is-fullwidth tableContent'>\n        <thead>\n            <tr>\n                <th colspan=\"4\">\n                    <select [(ngModel)]=\"idDictionarySelected\" (change)=\"loadSelectedDictionary();\">\n                        <option value=\"\" selected='selected'>Select a Dictionary</option>\n                        <option *ngFor=\"let dictionary of dictionaries\" value=\"{{ dictionary.id }}\">{{ dictionary.language }}</option>\n                    </select>\n                </th>\n            </tr>\n            <tr>\n                <th>Original</th>\n                <th>Translated</th>\n                <th>Description</th>\n                <th>Category</th>\n                <th>|</th>\n                <th>Category</th>\n                <th>Original</th>\n                <th>Translated</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody class=\"tableContent\">\n            <ng-container *ngFor=\"let entry2select of entry2SelectHashKeys; let i = index\">\n                <tr [ngClass]=\"{\n                            'new': entry2SelectHash[entry2select].entry && entries[ entry2SelectHash[entry2select].entry ].id == 0,\n                            'deleted': entry2SelectHash[entry2select].entry && entries[ entry2SelectHash[entry2select].entry ].delete == true,\n                            'changed': entry2SelectHash[entry2select].entry && entries[ entry2SelectHash[entry2select].entry ].update == true }\" >\n                    <ng-container *ngIf=\"entry2SelectHash[entry2select] && entry2SelectHash[entry2select].selected; else selectedEmpty\">\n                        <td>\n                            {{ categoriesSelectedHash [entriesSelected[ entry2SelectHash[entry2select].selected ].idCategory].name }}\n                        </td>\n                        <td>\n                            {{ entriesSelected[ entry2SelectHash[entry2select].selected ].entryTranslation }}\n                        </td>\n                        <td>\n                            {{ entriesSelected[ entry2SelectHash[entry2select].selected ].entryOriginal }}\n                        </td>\n                        <td>\n                            {{ entriesSelected[ entry2SelectHash[entry2select].selected ].description }}\n                        </td>\n                    </ng-container>\n\n                    <ng-template #selectedEmpty>\n                        <td>\n                            -\n                        </td>\n                        <td>\n                            -\n                        </td>\n                        <td>\n                            -\n                        </td>\n                        <td>\n                            -\n                        </td>\n                    </ng-template>\n\n                    <td>|</td>\n\n                    <ng-container *ngIf=\"entry2SelectHash[entry2select] && entry2SelectHash[entry2select].entry != null; else nonAnEntry\">\n                        <td>\n                            <select [(ngModel)]=\"entries[ entry2SelectHash[entry2select].entry ].idCategory\"\n                                    (ngModelChange)=\"changeEntry(entries[ entry2SelectHash[entry2select].entry ])\">\n                                <option *ngFor=\"let category of categories\" value=\"{{category.id}}\">{{ category.name }}</option>\n                            </select>\n                        </td>\n                        <td>\n                            <input type=\"text\" [(ngModel)]=\"entries[ entry2SelectHash[entry2select].entry ].entryTranslation\"\n                                    (ngModelChange)=\"changeEntry(entries[ entry2SelectHash[entry2select].entry ])\" />\n                        </td>\n                        <td>\n                            <input type=\"text\" [(ngModel)]=\"entries[ entry2SelectHash[entry2select].entry ].entryOriginal\"\n                                    (ngModelChange)=\"changeEntry(entries[ entry2SelectHash[entry2select].entry ])\" />\n                        </td>\n                        <td>\n                            <input type=\"text\" [(ngModel)]=\"entries[ entry2SelectHash[entry2select].entry ].description\"\n                                    (ngModelChange)=\"changeEntry(entries[ entry2SelectHash[entry2select].entry ])\" />\n                        </td>\n                    </ng-container>\n\n                    <ng-template #nonAnEntry>\n                        <td>\n                            <select (change)=\"addEntry($event,i);\">\n                                <option value=\"\">Select a category to copy</option>\n                                <option *ngFor=\"let category of categories\" value=\"{{category.id}}\">{{ category.name }}</option>\n                            </select>\n                        </td>\n                        <td>\n                            -\n                        </td>\n                        <td>\n                            -\n                        </td>\n                        <td>\n                            -\n                        </td>\n                    </ng-template>\n                </tr>\n            </ng-container>\n        </tbody>\n    </table>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ApiService } from '../../api';\nimport { FormControl, FormGroupDirective, FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';\n\nimport { Novel, Dictionary } from 'src/app/_models';\nimport { FormField, Meta, Option } from '../../_models/formField';\nimport { FormService } from '../form.service';\n\n@Component({\n  selector: 'app-dictionary-edit',\n  templateUrl: '../../_views/form/form.component.html',\n  styleUrls: ['../../_views/form/form.component.scss']\n})\nexport class EditComponent extends FormService implements OnInit {\n\n  formTitle: string;\n  idDictionary: number;\n  idNovel: number;\n  dictionary: Dictionary;\n  novels: Novel[];\n\n  constructor(\n      private router: Router\n    , private route: ActivatedRoute\n    , public api: ApiService\n    , public formBuilder: FormBuilder\n  ) {\n    super(formBuilder);\n  }\n\n  ngOnInit() {\n    this.idNovel = this.route.snapshot.params.idNovel;\n    this.idDictionary = this.route.snapshot.params.idDictionary;\n    this.formTitle = 'Edit Dictionary';\n\n    Promise.all([\n      this.api.Meta.get('languages'),\n      this.api.Dictionary.get({ id: this.idDictionary }),\n      this.api.Novel.getAll(),\n    ]).then((values: [Meta, Dictionary, Novel[]]) => {\n\n      this.api.Novel.getAll({ idDictionary: this.idDictionary })\n          .then((selectedNovels: Novel[]) => {\n            //console.log('SELECTED NOVELS', selectedNovels);\n            this.dictionary = values[1];\n            this.novels = values[2];\n            this.loadMeta(values[0], values[2]);\n            this.setValues(values[1], selectedNovels);\n            this.getForm(false);\n          });\n    });\n  }\n\n\n  submitForm(form: NgForm) {\n    const values = this.getValues(this.novels);\n    //console.log('submitForm',values);\n    this.api.Dictionary.update({ id: this.idDictionary, values })\n      .then(res => {\n        this.goBack();\n      }, (err) => {\n        console.log(err);\n      });\n  }\n\n  goBack() {\n    this.router.navigate(['/dictionary']);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { Dictionary } from '../_models/dictionary';\nimport { FormField, Meta, Option } from '../_models/formField';\nimport { Novel } from '../_models/novel';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormService {\n  constructor(\n      public formBuilder: FormBuilder\n  ) {\n    this.formGroup = formBuilder.group({\n        id: [null]\n      , name: [null]\n      , language: [null]\n      , novel: [null]\n    });\n  }\n\n  formGroup: FormGroup;\n  form: FormField[];\n\n  selectNovels: Option[] = [];\n  selectLanguages: Option[] = [];\n  indexes: string[] = [];\n\n  loadMeta(meta: Meta, novels: Novel[]): void {\n    this.selectLanguages = [];\n    for (const value of Object.keys(meta.languages)) {\n      this.selectLanguages.push(new Option(value, meta.languages[value]));\n    }\n    this.selectNovels = [];\n    for (const value of Object.keys(novels)) {\n      this.selectNovels.push(new Option(novels[value].id + '', novels[value].nameCustom, false));\n    }\n  }\n  addForm(name?: string, label?: string, type?: string, options?: Option[]): void {\n    this.indexes.push(name);\n    this.form.push(new FormField(name, label, type, options));\n  }\n  getForm(insert: boolean): void {\n    this.form = [];\n    if (insert) { this.addForm('id', '', 'hidden'); }\n    this.addForm('name', 'Name', 'text');\n    this.addForm('language', 'Language', 'select', this.selectLanguages);\n    this.addForm('novel', 'Novels', 'multiselect', this.selectNovels);\n  }\n\n  setValues(dictionary: Dictionary, novels: Novel[]): void {\n    const novValues = novels.map((nove: Novel) => nove.id + '');\n    const nov = new FormArray(this.selectNovels.map((option) => {\n      if (novValues.includes(option.value)) {\n        option.setChecked(true);\n      }\n      return option.control;\n    }));\n    if (dictionary) {\n      this.formGroup.setValue({\n          id: dictionary.id\n        , name: dictionary.name\n        , language: dictionary.language\n        , novel: nov\n      });\n    }\n  }\n\n  getValues(novelsAlreadyThere?:Novel[]): {dictionary: Dictionary, novels: number[]} {\n    const values2return = { dictionary: null, novels: null};\n    values2return.dictionary = new Dictionary(this.formGroup.value);\n    //console.log(values2return.dictionary);\n    delete (values2return.dictionary.novel);\n\n    const novIndex = this.indexes.indexOf('novel');\n    values2return.novels = this.form[novIndex].getValues().map(item => parseInt(item, 10));\n    if (novelsAlreadyThere && novelsAlreadyThere.length === values2return.novels.length) {\n      const dictValues = novelsAlreadyThere.map(item => item.id);\n      if (JSON.stringify(dictValues) === JSON.stringify(values2return.novels)) {\n        delete values2return.novels;\n      }\n    }\n\n    return values2return;\n  }\n}\n","export * from './dictionary.module';","<ng-template #actionButtons>\n\t<div class=\"columns actionButtons\">\n\t\t<div class=\"column\">\n\t\t\t<a  (click)=\"LINK(null,'add');\" class=\"button is-info\">Add Dictionary</a>\n\t\t</div>\n\t</div>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"actionButtons\"></ng-container>\n<div>\n\t<table class='table is-striped is-hoverable is-fullwidth'>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>Name</th>\n\t\t\t\t<th>Language</th>\n\t\t\t\t<th style=\"width: 200px;\"># of Categories</th>\n\t\t\t\t<th style=\"width: 200px;\">Actions</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<ng-container *ngFor=\"let dictionary of dictionaries\" >\n\t\t\t\t<tr>\n                    <td (click)=\"LINK(dictionary.id);\">{{ dictionary.name }}</td>\n                    <td (click)=\"LINK(dictionary.id);\">{{ dictionary.language }}</td>\n                    <td (click)=\"LINK(dictionary.id);\">{{ dictionary.countCategories() }}</td>\n\t\t\t\t\t<td>\n                        <!--a [routerLink]=\"['/dictionary/diff/', dictionary.id]\">\n                            Diff\n                        </a>\n                        /\n\t\t\t\t\t\t-->\n                        <a (click)=\"LINK(dictionary.id, 'edit');\" class=\"icon has-text-success\">\n                               <i class=\"fas fa-info-circle\"></i>\n                        </a>\n\t\t\t\t\t\t/\n                        <a [routerLink]=\"[]\" (click)=\"delete(dictionary.id);\" class=\"icon has-text-danger\">\n                            <i class=\"fas fa-ban\"></i>\n                        </a>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</ng-container>\n\t\t</tbody>\n\t</table>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ApiService } from '../../api';\n\nimport { Dictionary } from '../../_models/dictionary';\n\n@Component({\n  selector: 'app-dictionary-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss']\n})\nexport class ListComponent implements OnInit {\n\n  dictionaries: Dictionary[] = [];\n  idNovel: number = null;\n\n  constructor(\n      private router: Router\n    , private route: ActivatedRoute\n    , private api: ApiService\n    ) { }\n\n  ngOnInit() {\n    this.loadList();\n  }\n  loadList() {\n    this.idNovel = this.route.snapshot.params.idNovel;\n    this.api.Dictionary.getAll({idNovel: this.idNovel})\n      .then((dictionaries) => {\n        // this.novels = [novels];\n        this.dictionaries = Object.values(dictionaries);\n      }, (error) => {\n        console.log(error);\n      });\n  }\n  LINK(idDictionary?: number, action?: string) {\n    const base = [];\n    if (this.idNovel) {\n      base.push('novel');\n      base.push(this.idNovel);\n    }\n    base.push('dictionary');\n    if (action) {\n      base.push(action);\n    }\n    if (idDictionary) {\n      base.push(idDictionary);\n    }\n    console.log('LINK', base);\n    this.router.navigate(base);\n  }\n  delete(idDictionary: number) {\n    if (confirm('Are you sure?')) {\n      this.api.Dictionary.delete({ id: idDictionary })\n        .then((_) => {\n          // this.novels = [novels];\n          this.loadList();\n        }, (error) => {\n          console.log(error);\n        });\n    }\n    return true;\n  }\n}\n"],"names":["FormService","i0","AddComponent","constructor","router","route","api","formBuilder","ngOnInit","idNovel","snapshot","params","idDictionary","formTitle","Promise","all","Meta","get","Dictionary","id","Novel","getAll","then","values","dictionary","novels","loadMeta","novel","setValues","getForm","submitForm","form","getValues","add","res","goBack","err","console","log","LINK","action","base","push","navigate","selectors","features","decls","vars","consts","template","ctx","CommonModule","RouterModule","ListComponent","EditComponent","DiffComponent","routes","path","component","data","title","breadcrumb","loadChildren","m","CategoryModule","redirectTo","DictionaryRoutingModule","forChild","imports","i1","exports","FormsModule","ReactiveFormsModule","DictionaryModule","declarations","DictionaryEntry","ctx_r5","ctx_r22","ctx_r26","ctx_r30","ctx_r34","ctx_r39","_r11","_r14","dictionaries","Object","getCache","error","ngOnDestroy","categories","categoriesHash","entries","entry2SelectHash","entry2SelectHashKeys","categoriesSelected","categoriesSelectedHash","entriesSelected","idDictionarySelected","loadSelectedDictionary","getSelectedCache","changeEntry","entry","idCategory","update","entryOriginal","entriesOriginalValues","entryTranslation","description","addEntry","$event","i","target","value","selectedValues","selectedEntry","selected","newEntry","length","saveList","tmpEntries","send","forEach","category","sen","fullSave","status","Category","name","Entry","keys","selectedNovels","FormArray","FormField","Option","formGroup","group","language","meta","selectLanguages","languages","selectNovels","nameCustom","addForm","label","type","options","indexes","insert","novValues","map","nove","nov","option","includes","setChecked","control","setValue","novelsAlreadyThere","values2return","novIndex","indexOf","item","parseInt","dictValues","JSON","stringify","factory","providedIn","ctx_r4","ctx_r7","ctx_r9","ctx_r10","ctx_r11","ctx_r12","loadList","delete","confirm","_"],"sourceRoot":"webpack:///"}